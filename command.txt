ssh -l name login.icepp.jp -Y
{-l for logingname, -X-Y for enable some function that TBrowser could work}

xed : Xcode

eog : view png

The next time you start a new session to start working, you’ll have to setup the ATLAS software environment again:
setupATLAS
Or
export ATLAS_LOCAL_ROOT_BASE=/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase
alias setupATLAS='source ${ATLAS_LOCAL_ROOT_BASE}/user/atlasLocalSetup.sh'
setupATLAS


bkill : kill jobs in cluster

Upload : scp file name@login.icepp.jp:~
Download : scp name@login.icepp.jp:~/path/file .

ssh -Y name@lxplus.cern.ch   : connect to your cern cluster

source /home/software/root/bin/thisroot.sh

combine the root file hadd combine.root filename*.root

ami
もしくは login.icepp.jp 上で、
setupATLAS
lsetup pyami
voms-proxy-init -voms atlas
で設定をした後、
(voms-proxy-info -all) 看權限
ami show dataset info mc16_13TeV.364100.Sherpa_221_NNPDF30NNLO_Zmumu_MAXHTPTV0_70_CVetoBVeto.deriv.DAOD_SUSY1.e5271_s3126_r10201_p399
ami show dataset info


root [2] CollectionTree->Scan(“MET_Reference_AntiKt4EMTopoAuxDyn.name")
Can know container

Check job : 
bjobs

Check how many file in directory
ls -1 | wc -l

[1]+ emacs....
となっている場合は
kill -9 %1
とするとkillできます


vector<vector<float> >に関して
LinkDef.h
#ifndef __VEC__
#define __VEC__
 
#include <vector>
  
#ifdef __CINT__
#pragma link off all globals;
#pragma link off all classes;
#pragma link off all functions;
#pragma link C++ class vector<vector<int> >+;
#pragma link C++ class vector<vector<bool> >+;
#pragma link C++ class vector<vector<char> >+;
#pragma link C++ class vector<vector<short> >+;
#pragma link C++ class vector<vector<long> >+;
#pragma link C++ class vector<vector<unsigned char> >+;
#pragma link C++ class vector<vector<unsigned short> >+;
#pragma link C++ class vector<vector<unsigned int> >+;
#pragma link C++ class vector<vector<unsigned long> >+;
#pragma link C++ class vector<vector<float> >+;
#pragma link C++ class vector<vector<double> >+;
#pragma link C++ class vector<vector<char*> >+;
#pragma link C++ class vector<vector<const char*> >+;
#pragma link C++ class vector<vector<Long64_t> >+;
#pragma link C++ class vector<vector<ULong64_t> >+;
#pragma link C++ class vector<vector<void*> >+;
#endif
 
#endif

rootcint -f Dict.cc -c LinkDef.h
後はDict.ccをincludeするか、一緒にコンパイルすればvector<vector<float> >が使えるはず



setupATLAS
lsetup "lcgenv -p LCG_98python3 x86_64-centos7-gcc9-opt root_numpy"

lsetup "lcgenv -p LCG_98python3 x86_64-centos7-gcc9-opt scikitlearn"

lsetup "lcgenv -p LCG_98python3 x86_64-centos7-gcc9-opt"
でパッケージの一覧が確認できます。
